/*
 * Two options, with or without Crashlytics (https://firebase.google.com/products/crashlytics)
 *
 * Build with Crashlytics:
 * - Create own Crashlytics project
 * - get 'google-services.json' from Crashlytics and add it to 'app' directory
 *
 * Build without Crashlytics:
 * - Comment out following two lines from 'plugin' section
 *       id 'com.google.gms.google-services'
 *       id 'com.google.firebase.crashlytics'
 */

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'kotlinx-serialization'
    id 'com.google.android.gms.oss-licenses-plugin'

    // Comment out following two lines if building without Crashlytics
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--first-parent', '--count', 'main'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    }
    catch (ex) {
        // Print note about error with git repo and return 1.
        println("Error from git: $ex")
        println("Possible reason is that this is CI build from specific branch, and build does not know 'main'.")
        println("For that reason versionCode is not valid, but we use just 1.")
        return 1
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null
    }
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        releaseSigningConfig {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    namespace 'com.korsumaki.wifiradar'
    compileSdk 33

    defaultConfig {
        applicationId "com.korsumaki.wifiradar"
        minSdk 28
        targetSdk 33
        versionCode getVersionCode()
        versionName getVersionName()
        setProperty("archivesBaseName", "WifiRadar-" + getVersionName() ) // Add version tag to apk name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseSigningConfig
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        // Check Compose Compiler vs Kotlin compatibility from here:
        // https://developer.android.com/jetpack/androidx/releases/compose-kotlin
        kotlinCompilerExtensionVersion '1.5.1'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    def composeBom = platform('androidx.compose:compose-bom:2023.06.01')
    implementation composeBom
    androidTestImplementation composeBom

    // Material Design 3 (or foundational components, or main API)
    implementation 'androidx.compose.material3:material3'
    implementation "androidx.compose.foundation:foundation"
    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.ui:ui-graphics"
    implementation "com.google.android.material:material:1.9.0"

    // Android Studio Preview support
    implementation "androidx.compose.ui:ui-tooling-preview"
    debugImplementation "androidx.compose.ui:ui-tooling"

    // UI Tests
    androidTestImplementation "androidx.compose.ui:ui-test-junit4"
    debugImplementation "androidx.compose.ui:ui-test-manifest"

    // Unit Tests
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.google.truth:truth:1.1.5'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    // Others
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'androidx.activity:activity-compose:1.7.2'

    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1'
    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.1'

    // Firebase Crashlytics
    releaseImplementation platform('com.google.firebase:firebase-bom:32.1.1')
    releaseImplementation 'com.google.firebase:firebase-crashlytics-ktx'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.12'
}