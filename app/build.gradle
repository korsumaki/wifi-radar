import org.jetbrains.kotlin.gradle.dsl.JvmTarget

/*
 * Two options, with or without Crashlytics (https://firebase.google.com/products/crashlytics)
 *
 * Build with Crashlytics:
 * - Create own Crashlytics project
 * - get 'google-services.json' from Crashlytics and add it to 'app' directory
 *
 * Build without Crashlytics:
 * - Comment out following two lines from 'plugin' section
 *       alias libs.plugins.googleServices
 *       alias libs.plugins.firebaseCrashlytics
 */

plugins {
    alias libs.plugins.androidApplication
    alias libs.plugins.jetbrainsKotlin
    alias libs.plugins.jetbrainsKotlinSerialization
    alias libs.plugins.composeCompiler
    id 'kotlinx-serialization'
    alias libs.plugins.ossLicenses
    id 'base'

    // Comment out following two lines if building without Crashlytics
    alias libs.plugins.googleServices
    alias libs.plugins.firebaseCrashlytics
}

def getVersionCode = { ->
    try {
        def versionCodeProvider = providers.exec {
            commandLine 'git', 'rev-list', '--first-parent', '--count', 'main'
        }
        return Integer.parseInt(versionCodeProvider.standardOutput.asText.get().trim())
    }
    catch (ex) {
        // Print note about error with git repo and return 1.
        println("Error from git: $ex")
        println("Possible reason is that this is CI build from specific branch, and build does not know 'main'.")
        println("For that reason versionCode is not valid, but we use just 1.")
        return 1
    }
}

def getVersionName = { ->
    try {
        def versionProvider = providers.exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
        }
        return versionProvider.standardOutput.asText.get().trim()
    }
    catch (ignored) {
        return "unknown"
    }
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// Fix for deprecated BasePluginConvention feature
base {
    archivesName = "WifiRadar-" + getVersionName() // Add version tag to apk name
}

// Dependency: processDebugGoogleServices must be done always before uploadCrashlyticsMappingFileRelease
tasks.configureEach {
    if (name == "uploadCrashlyticsMappingFileRelease") {
        dependsOn("processDebugGoogleServices")
    }
}

android {
    signingConfigs {
        releaseSigningConfig {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    namespace 'com.korsumaki.wifiradar'
    compileSdk libs.versions.compileSdk.get().toInteger()

    defaultConfig {
        applicationId "com.korsumaki.wifiradar"
        minSdk libs.versions.minSdk.get().toInteger()
        targetSdk libs.versions.targetSdk.get().toInteger()
        versionCode getVersionCode()
        versionName getVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseSigningConfig
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlin {
        compilerOptions {
            jvmTarget = JvmTarget.JVM_17
        }
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation platform(libs.androidx.compose.bom)
    androidTestImplementation platform(libs.androidx.compose.bom)

    // Material Design 3 (or foundational components, or main API)
    implementation libs.androidx.compose.material3
    implementation libs.androidx.compose.foundation
    implementation libs.androidx.compose.ui
    implementation libs.androidx.compose.ui.graphics
    implementation libs.android.material

    // Android Studio Preview support
    implementation libs.androidx.compose.ui.tooling.preview
    debugImplementation libs.androidx.compose.ui.tooling

    // UI Tests
    androidTestImplementation libs.androidx.compose.ui.test.junit4
    debugImplementation libs.androidx.compose.ui.test.manifest

    // Unit Tests
    testImplementation libs.junit
    testImplementation libs.truth
    androidTestImplementation libs.androidx.test.ext.junit
    androidTestImplementation libs.androidx.test.espresso.core

    // Others
    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose

    implementation libs.kotlinx.serialization.json
    implementation libs.play.services.oss.licenses

    // Firebase Crashlytics
    releaseImplementation platform(libs.firebase.bom)

    debugImplementation libs.leakcanary.android
}